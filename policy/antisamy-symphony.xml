<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
W3C rules retrieved from:
http://www.w3.org/TR/html401/struct/global.html
-->

<!--
Slashdot allowed tags taken from "Reply" page:
<b> <i> <p> <br> <a> <ol> <ul> <li> <dl> <dt> <dd> <em> <strong> <tt> <blockquote> <div> <ecode> <quote>
-->

<anti-samy-rules xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:noNamespaceSchemaLocation="antisamy.xsd">

	<!-- Directive: https://www.owasp.org/index.php/AntiSamy_Directives -->
	<directives>

		<!-- When this feature is on, AntiSamy will output the sanitized data in XHTML format as opposed to just regular HTML. Default: false -->
		<directive name="useXHTML" value="true"/>

		<!-- When "useXHTML" is turned on, AntiSamy will automatically prepend the XML header. Enabling this feature will tell AntiSamy not to do that. Default: true -->
		<directive name="omitXmlDeclaration" value="true"/>

		<!-- When this feature is enabled, AntiSamy will automatically prepend the HTML doctype declaration. By default, AntiSamy will not prepend this header. Default: true-->
		<directive name="omitDoctypeDeclaration" value="true"/>

		<!-- When enabled, AntiSamy will automatically format the output according to some basic rules and indentation. Kind of like "pretty print." Default: true -->
		<directive name="formatOutput" value="false"/>

		<!-- This directive specifies the maximum size (in bytes) of user input before it's validated. Default: 100K -->
		<directive name="maxInputSize" value="100000"/>

		<!-- When the developer chooses to allow CSS, this directive will specify whether or not remote stylesheets found referenced in the user's input will be pulled down and embedded into the current user input. Default: false-->
		<directive name="embedStyleSheets" value="false"/>

		<!-- This feature allows developers to specify how many remote stylesheets can be downloaded from any one input. Default: 1 -->
		<directive name="maxStyleSheetImports" value="1"/>

		<!-- When "embedStyleSheets" is enabled, this timeout value (in milliseconds) will be used when fetching the offsite resource in question. This should be used to prevent validation threads from blocking when connecting to 3rd party systems that may purposefully act really, really slowly. Default: 1000 -->
		<directive name="connectionTimeout" value="1000"/>

		<!-- When enabled, AntiSamy will keep HTML comments supplied in the input. Default: false-->
		<directive name="preserveComments" value="false"/>

		<!-- When enabled, AntiSamy will append rel="nofollow" attributes to all anchor (<a>) tags supplied in the input. This is useful for telling search engines not to associate your site with sites that are under the control of your users. Default: false -->
		<directive name="nofollowAnchors" value="false"/>

		<!-- When enabled, AntiSamy will treat attributes of <embed> tags in the policy the same as any <param> tags nested inside the the <embed>. This allows users to, according to policy, pass in data in either of those two methods with equal security. This is needed for sites that allow users to supply videos, etc. Default: false -->
		<directive name="validateParamAsEmbed" value="false"/>

		<!-- When enabled, this feature is intended to preserve spaces as specified in the input without normalization. Right now it only works as according to http://xerces.apache.org/xercesj/apiDocs/org/apache/xml/serialize/OutputFormat.html#setPreserveSpace%28boolean%29. Default: false -->
		<directive name="preserveSpace" value="false"/>

		<!-- When this directive is set to "encode," it will encode the tag using HTML entities, instead of removing the tag, which is the default behavior. -->
		<directive name="onUnknownTag" value="remove"/>

	</directives>

	<!-- You can declare regular expressions here that can be used in the rest of the Policy File -->
	<common-regexps>

		<!-- The 16 colors defined by the HTML Spec (also used by the CSS Spec) -->
		<regexp name="colorName" value="(aqua|black|blue|fuchsia|gray|grey|green|lime|maroon|navy|olive|purple|red|silver|teal|white|yellow)"/>

		<!-- HTML/CSS Spec allows 3 or 6 digit hex to specify color -->
		<regexp name="colorCode" value="(#([0-9a-fA-F]{6}|[0-9a-fA-F]{3}))"/>

		<regexp name="anything" value=".*"/>
		<regexp name="numberOrPercent" value="(\d)+(%{0,1})"/>
		<regexp name="paragraph" value="([\p{L}\p{N},'\.\s\-_\(\)\?]|&amp;[0-9]{2};)*"/>
		<regexp name="htmlId" value="[a-zA-Z0-9\:\-_\.]+"/>
		<regexp name="htmlTitle" value="[\p{L}\p{N}\s\-_',:\[\]!\./\\\(\)&amp;]*"/> <!-- force non-empty with a '+' at the end instead of '*' -->
		<regexp name="htmlClass" value="[a-zA-Z0-9\s,\-_]+"/>

		<regexp name="onsiteURL" value="([\p{L}\p{N}\\\.\#@\$%\+&amp;;\-_~,\?=/!]+|\#(\w)+)"/>
		<regexp name="offsiteURL" value="(\s)*((ht|f)tp(s?)://|mailto:)[\p{L}\p{N}]+[\p{L}\p{N}\p{Zs}\.\#@\$%\+&amp;;:\-_~,\?=/!\(\)]*(\s)*"/>

		<regexp name="boolean" value="(true|false)"/>
		<regexp name="singlePrintable" value="[a-zA-Z0-9]{1}"/> <!-- \w allows the '_' character -->

		<!-- This is for elements (ex: elemName { ... }) -->
		<regexp name="cssElementSelector" value="[a-zA-Z0-9\-_]+|\*"/>

		<!--  This is to list out any element names that are *not* valid -->
		<regexp name="cssElementExclusion" value=""/>

		<!--  This if for classes (ex: .className { ... }) -->
		<regexp name="cssClassSelector" value="\.[a-zA-Z0-9\-_]+"/>

		<!--  This is to list out any class names that are *not* valid -->
		<regexp name="cssClassExclusion" value=""/>

		<!--  This is for ID selectors (ex: #myId { ... } -->
		<regexp name="cssIDSelector" value="#[a-zA-Z0-9\-_]+"/>

		<!--  This is to list out any IDs that are *not* valid - FIXME: What should the default be to avoid div hijacking? *? -->
		<regexp name="cssIDExclusion" value=""/>

		<!--  This is for pseudo-element selector (ex. foo:pseudo-element { ... } -->
		<regexp name="cssPseudoElementSelector" value=":[a-zA-Z0-9\-_]+"/>

		<!--  This is to list out any psuedo-element names that are *not* valid -->
		<regexp name="cssPsuedoElementExclusion" value=""/>

		<!--  This is for attribute selectors (ex. foo[attr=value] { ... } -->
		<regexp name="cssAttributeSelector" value="\[[a-zA-Z0-9\-_]+((=|~=|\|=){1}[a-zA-Z0-9\-_]+){1}\]"/>

		<!--  This is to list out any attribute names that are *not* valid -->
		<regexp name="cssAttributeExclusion" value=""/>

		<!--  This is for resources referenced from CSS (such as background images and other imported stylesheets) -->
		<regexp name="cssOnsiteUri" value="url\(([\p{L}\p{N}\\/\.\?=\#&amp;;\-_~]+|\#(\w)+)\)"/>
		<regexp name="cssOffsiteUri" value="url\((\s)*((ht|f)tp(s?)://)[\p{L}\p{N}]+[~\p{L}\p{N}\p{Zs}\-_\.@#$%&amp;;:,\?=/\+!]*(\s)*\)"/>

		<!--  This if for CSS Identifiers -->
		<regexp name="cssIdentifier" value="[a-zA-Z0-9\-_]+"/>

		<!--  This is for comments within CSS (ex. /* comment */) -->
		<regexp name="cssCommentText" value="[\p{L}\p{N}\-_,\/\\\.\s\(\)!\?\=\$#%\^&amp;:&quot;']+"/>

		<regexp name="integer" value="(-|\+)?[0-9]+"/>
		<regexp name="positiveInteger" value="(\+)?[0-9]+"/>
		<regexp name="number" value="(-|\+)?([0-9]+(\.[0-9]+)?)"/>
		<regexp name="angle" value="(-|\+)?([0-9]+(\.[0-9]+)?)(deg|grads|rad)"/>
		<regexp name="time" value="([0-9]+(\.[0-9]+)?)(ms|s)"/>
		<regexp name="frequency" value="([0-9]+(\.[0-9]+)?)(hz|khz)"/>
		<regexp name="length" value="((-|\+)?0|(-|\+)?([0-9]+(\.[0-9]+)?)(em|ex|px|in|cm|mm|pt|pc))"/>
		<regexp name="positiveLength" value="((\+)?0|(\+)?([0-9]+(\.[0-9]+)?)(em|ex|px|in|cm|mm|pt|pc))"/>
		<regexp name="percentage" value="(-|\+)?([0-9]+(\.[0-9]+)?)%"/>
		<regexp name="positivePercentage" value="(\+)?([0-9]+(\.[0-9]+)?)%"/>

		<regexp name="absolute-size" value="(xx-small|x-small|small|medium|large|x-large|xx-large)"/>
		<regexp name="relative-size" value="(larger|smaller)"/>

		<!-- Used for CSS Color specifications (complex regexp expresses integer values of 0-255) -->
		<regexp name="rgbCode" value="rgb\(([1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5]),([1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5]),([1]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\)"/>

		<!-- CSS2 Allowed System Color Values -->
		<regexp name="systemColor" value="(activeborder|activecaption|appworkspace|background|buttonface|buttonhighlight|buttonshadow|buttontext|captiontext|graytext|highlight|highlighttext|inactiveborder|inactivecaption|inactivecaptiontext|infobackground|infotext|menu|menutext|scrollbar|threeddarkshadow|threedface|threedhighlight|threedlightshadow|threedshadow|window|windowframe|windowtext)"/>

		<!-- This is where we specify what Flash src to allow -->
		<regexp name="flashSites" value="http://(download\.macromedia\.com/pub|www\.macromedia\.com/(go|shockwave)|c\.brightcove\.com/services|gamevideos\.1up\.com/swf|www\.youtube\.com/v|vimeo\.com|www\.gametrailers\.com|videomedia\.ign\.com/ev|image\.com\.com/gamespot|www\.hulu\.com/embed|embed\.break\.com|player\.ordienetworks\.com/flash|www\.adultswim\.com/video/vplayer|www\.dailymotion\.com/swf|www\.ustream\.tv/flash/video|cdn-i\.dmdentertainment\.com|media\.mtvnservices\.com|www\.justin\.tv/widgets|www\.viddler\.com/(player|simple_on_site)|static\.twitter\.com/flash|www\.gamepro\.com/bin|www\.divshare\.com/flash|www\.facebook\.com/v)/.*"/>
	</common-regexps>

	<!-- Some attributes are common to all (or most) HTML tags. There aren't many that qualify for this. You have to make sure there's no collisions between any of these attribute names with attribute names of other tags that are for different purposes. -->
	<common-attributes>

		<!-- Attribute.name = id, class, href, align, width, etc. Attribute.description = What rules in English you want to tell the users they can have for this attribute. Include helpful things so they'll be able to tune their HTML -->

		<attribute name="class" description="The 'class' of any HTML attribute is usually a single word, but it can also be a list of class names separated by spaces">
			<regexp-list>
				<regexp name="htmlClass"/>
			</regexp-list>
		</attribute>

		<attribute name="id" description="The 'id' of any HTML attribute should not contain anything besides letters and numbers">
			<regexp-list>
				<regexp name="htmlId"/>
			</regexp-list>
		</attribute>

		 <attribute name="title" description="The 'title' attribute provides text that shows up in a 'tooltip' when a user hovers their mouse over the element">
		 	<regexp-list>
		 		<regexp name="htmlTitle"/>
		 	</regexp-list>
		</attribute>

		<attribute name="alt" description="The 'alt' attribute provides alternative text to users when its visual representation is not available">
		 	<regexp-list>
		 		<regexp name="paragraph"/>
		 	</regexp-list>
		</attribute>

		<attribute name="href">
			<regexp-list>
				<regexp name="onsiteURL"/>
				<regexp name="offsiteURL"/>
			</regexp-list>
		</attribute>

		<attribute name="align" description="The 'align' attribute of an HTML element is a direction word, like 'left', 'right' or 'center'">
			<literal-list>
				<literal value="center"/>
				<literal value="left"/>
				<literal value="right"/>
				<literal value="justify"/>
				<literal value="char"/>
			</literal-list>
		</attribute>

		<attribute name="lang" description="The 'lang' attribute tells the browser what language the element's attribute values and content are written in">
		 	<regexp-list>
		 		<regexp value="[a-zA-Z]{2,20}"/>
		 	</regexp-list>
		 </attribute>

	</common-attributes>

	 <!-- You can declare attributes here that are global to all different tags. -->
	<global-tag-attributes>
		<attribute name="title"/>
		<attribute name="lang"/>
	</global-tag-attributes>

	<!-- You can declare tags here that will not be removed, filtered, validated or truncated, but encoded using HTML entities -->
	<tags-to-encode>
		<tag>g</tag>
		<tag>grin</tag>
	</tags-to-encode>

	<!-- You can define parsing rules here that will be used for each tag individually. If a tag is not listed here, the default action is to remove it, but leave its children text intact-->
	<tag-rules>

		<!--
			Tag.name = a, b, div, body, etc.
			Tag.action =
				remove: remove tag and contents
				filter: remove tag but keep content (default for missing tags),
				validate: verify if that tag attributes and children follow policy. Keep content as long as it passes rules
				truncate: possibly remove all attributes? Not clear
				 -->

		<!-- Tags related to JavaScript -->
		<tag name="script" action="remove"/>
		<tag name="noscript" action="remove"/>

		<!-- Frame & related tags -->
		<tag name="iframe" action="remove"/>
		<tag name="frameset" action="remove"/>
		<tag name="frame" action="remove"/>
		<tag name="noframes" action="remove"/>

		<!-- CSS related tags -->
		<tag name="style" action="remove"/>

		<!-- All reasonable formatting tags -->

		<tag name="p" action="validate">
			<attribute name="align"/>
		</tag>

		<tag name="div" action="validate"/>
		<tag name="i" action="validate"/>
		<tag name="b" action="validate"/>
		<tag name="em" action="validate"/>
		<tag name="blockquote" action="validate"/>
		<tag name="tt" action="validate"/>
		<tag name="strong" action="validate"/>

		<tag name="br" action="truncate"/>

		<!-- Anchor and anchor related tags -->
		<tag name="a" action="validate">

			<attribute name="href" />
			<attribute name="nohref">
				<literal-list>
					<literal value="nohref"/>
					<literal value=""/>
				</literal-list>
			</attribute>
			<attribute name="rel">
				<literal-list>
					<literal value="nofollow"/>
				</literal-list>
			</attribute>
		</tag>

		<!-- List tags -->
		<tag name="ul" action="validate"/>
		<tag name="ol" action="validate"/>
		<tag name="li" action="validate"/>

	</tag-rules>

	<!-- You can define parsing rules here that will be used for each CSS property individually. Only CSS defined in this section is allowed. -->
	<css-rules>
	</css-rules>

	<!-- don't think this needs to be modified. Is the same across policies -->
	<allowed-empty-tags>
        <literal-list>
            <literal value="br"/>
            <literal value="hr"/>
            <literal value="a"/>
            <literal value="img"/>
            <literal value="link"/>
            <literal value="iframe"/>
            <literal value="script"/>
            <literal value="object"/>
            <literal value="applet"/>
            <literal value="frame"/>
            <literal value="base"/>
            <literal value="param"/>
            <literal value="meta"/>
            <literal value="input"/>
            <literal value="textarea"/>
            <literal value="embed"/>
            <literal value="basefont"/>
            <literal value="col"/>
            <literal value="div"/>
        </literal-list>
    </allowed-empty-tags>

</anti-samy-rules>